use bitvec::prelude::*;
use combine::Parser;
use crate::regex::re::*;
use crate::regex::syntax::parser::*;
use crate::regex::syntax::desugar::*;
use crate::regex::syntax::ext::*;
use crate::regex::syntax::ext::Ext::*;
use std::rc::Rc;
use std::collections::HashSet;



#[test]
fn test_parser_simp_us_addr() {
    let input = "^(.*) ([A-Za-z]{2}) ([0-9]{5})(-[0-9]{4})?$";
    let expected = Concat(vec![Carat, GrpNonMarking(Rc::new(Star(Rc::new(Dot), true))), Char(' '), 
        GrpNonMarking(Rc::new(Bound(Rc::new(Any(HashSet::from(['I', 'B', 'h', 'q', 'R', 'f', 'j', 'a', 'K', 'C', 'o', 'G', 'T', 'U', 'e', 'Q', 'g', 'p', 't', 'u', 'r', 'm', 'd', 'w', 'i', 'n', 'E', 'J', 'N', 'S', 'b', 's', 'v', 'Y', 'D', 'F', 'c', 'L', 'O', 'V', 'k', 'W', 'l', 'A', 'x', 'y', 'X', 'H', 'M', 'P']))), 2, None, true))), Char(' '), 
        GrpNonMarking(Rc::new(Bound(Rc::new(Any(HashSet::from(['4', '6', '0', '8', '7', '2', '1', '5', '3']))), 5, None, true))), 
        Opt(Rc::new(GrpNonMarking(Rc::new(Concat(vec![Char('-'), Bound(Rc::new(Any(HashSet::from(['1', '6', '0', '8', '3', '7', '4', '2', '5']))), 4, None, true)])))), true), Dollar]);
    let result = parse_ext().parse(input);
    match result {
        Err(err) => print!("{:?}", err),
        Ok((ext, _rest)) => {
            let simp = simp_ext(&ext);
            // print!("{:?}", simp) ;
            assert_eq!(expected, simp)
        } 
    }
}


#[test]
fn test_parser_simp_to_re_us_addr() {
    use RE::*;
    let input = "^(.*) ([A-Za-z]{2}) ([0-9]{5})(-[0-9]{4})?$";
    let expected = seq!(star!(choice!(Lit('\0'), choice!(Lit('\u{1}'), choice!(Lit('\u{2}'), choice!(Lit('\u{3}'), choice!(Lit('\u{4}'), choice!(Lit('\u{5}'), choice!(Lit('\u{6}'), choice!(Lit('\u{7}'), choice!(Lit('\u{8}'), choice!(Lit('\t'), choice!(Lit('\n'), choice!(Lit('\u{b}'), choice!(Lit('\u{c}'), choice!(Lit('\r'), choice!(Lit('\u{e}'), choice!(Lit('\u{f}'), choice!(Lit('\u{10}'), choice!(Lit('\u{11}'), choice!(Lit('\u{12}'), choice!(Lit('\u{13}'), choice!(Lit('\u{14}'), choice!(Lit('\u{15}'), choice!(Lit('\u{16}'), choice!(Lit('\u{17}'), choice!(Lit('\u{18}'), choice!(Lit('\u{19}'), choice!(Lit('\u{1a}'), choice!(Lit('\u{1b}'), choice!(Lit('\u{1c}'), choice!(Lit('\u{1d}'), choice!(Lit('\u{1e}'), choice!(Lit('\u{1f}'), choice!(Lit(' '), choice!(Lit('!'), choice!(Lit('"'), choice!(Lit('#'), choice!(Lit('$'), choice!(Lit('%'), choice!(Lit('&'), choice!(Lit('\''), choice!(Lit('('), choice!(Lit(')'), choice!(Lit('*'), choice!(Lit('+'), choice!(Lit(','), choice!(Lit('-'), choice!(Lit('.'), choice!(Lit('/'), choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), choice!(Lit('8'), choice!(Lit('9'), choice!(Lit(':'), choice!(Lit(';'), choice!(Lit('<'), choice!(Lit('='), choice!(Lit('>'), choice!(Lit('?'), choice!(Lit('@'), choice!(Lit('A'), choice!(Lit('B'), choice!(Lit('C'), choice!(Lit('D'), choice!(Lit('E'), choice!(Lit('F'), choice!(Lit('G'), choice!(Lit('H'), choice!(Lit('I'), choice!(Lit('J'), choice!(Lit('K'), choice!(Lit('L'), choice!(Lit('M'), choice!(Lit('N'), choice!(Lit('O'), choice!(Lit('P'), choice!(Lit('Q'), choice!(Lit('R'), choice!(Lit('S'), choice!(Lit('T'), choice!(Lit('U'), choice!(Lit('V'), choice!(Lit('W'), choice!(Lit('X'), choice!(Lit('Y'), choice!(Lit('Z'), choice!(Lit('['), choice!(Lit('\\'), choice!(Lit(']'), choice!(Lit('^'), choice!(Lit('_'), choice!(Lit('`'), choice!(Lit('a'), choice!(Lit('b'), choice!(Lit('c'), choice!(Lit('d'), choice!(Lit('e'), choice!(Lit('f'), choice!(Lit('g'), choice!(Lit('h'), choice!(Lit('i'), choice!(Lit('j'), choice!(Lit('k'), choice!(Lit('l'), choice!(Lit('m'), choice!(Lit('n'), choice!(Lit('o'), choice!(Lit('p'), choice!(Lit('q'), choice!(Lit('r'), choice!(Lit('s'), choice!(Lit('t'), choice!(Lit('u'), choice!(Lit('v'), choice!(Lit('w'), choice!(Lit('x'), choice!(Lit('y'), choice!(Lit('z'), choice!(Lit('{'), choice!(Lit('|'), choice!(Lit('}'), Lit('~')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), seq!(Lit(' '), seq!(seq!(choice!(Lit('A'), choice!(Lit('B'), choice!(Lit('C'), choice!(Lit('D'), choice!(Lit('E'), choice!(Lit('F'), choice!(Lit('G'), choice!(Lit('H'), choice!(Lit('I'), choice!(Lit('J'), choice!(Lit('K'), choice!(Lit('L'), choice!(Lit('M'), choice!(Lit('N'), choice!(Lit('O'), choice!(Lit('P'), choice!(Lit('Q'), choice!(Lit('R'), choice!(Lit('S'), choice!(Lit('T'), choice!(Lit('U'), choice!(Lit('V'), choice!(Lit('W'), choice!(Lit('X'), choice!(Lit('Y'), choice!(Lit('a'), choice!(Lit('b'), choice!(Lit('c'), choice!(Lit('d'), choice!(Lit('e'), choice!(Lit('f'), choice!(Lit('g'), choice!(Lit('h'), choice!(Lit('i'), choice!(Lit('j'), choice!(Lit('k'), choice!(Lit('l'), choice!(Lit('m'), choice!(Lit('n'), choice!(Lit('o'), choice!(Lit('p'), choice!(Lit('q'), choice!(Lit('r'), choice!(Lit('s'), choice!(Lit('t'), choice!(Lit('u'), choice!(Lit('v'), choice!(Lit('w'), choice!(Lit('x'), Lit('y')))))))))))))))))))))))))))))))))))))))))))))))))), seq!(choice!(Lit('A'), choice!(Lit('B'), choice!(Lit('C'), choice!(Lit('D'), choice!(Lit('E'), choice!(Lit('F'), choice!(Lit('G'), choice!(Lit('H'), choice!(Lit('I'), choice!(Lit('J'), choice!(Lit('K'), choice!(Lit('L'), choice!(Lit('M'), choice!(Lit('N'), choice!(Lit('O'), choice!(Lit('P'), choice!(Lit('Q'), choice!(Lit('R'), choice!(Lit('S'), choice!(Lit('T'), choice!(Lit('U'), choice!(Lit('V'), choice!(Lit('W'), choice!(Lit('X'), choice!(Lit('Y'), choice!(Lit('a'), choice!(Lit('b'), choice!(Lit('c'), choice!(Lit('d'), choice!(Lit('e'), choice!(Lit('f'), choice!(Lit('g'), choice!(Lit('h'), choice!(Lit('i'), choice!(Lit('j'), choice!(Lit('k'), choice!(Lit('l'), choice!(Lit('m'), choice!(Lit('n'), choice!(Lit('o'), choice!(Lit('p'), choice!(Lit('q'), choice!(Lit('r'), choice!(Lit('s'), choice!(Lit('t'), choice!(Lit('u'), choice!(Lit('v'), choice!(Lit('w'), choice!(Lit('x'), Lit('y')))))))))))))))))))))))))))))))))))))))))))))))))), star!(choice!(Lit('A'), choice!(Lit('B'), choice!(Lit('C'), choice!(Lit('D'), choice!(Lit('E'), choice!(Lit('F'), choice!(Lit('G'), choice!(Lit('H'), choice!(Lit('I'), choice!(Lit('J'), choice!(Lit('K'), choice!(Lit('L'), choice!(Lit('M'), choice!(Lit('N'), choice!(Lit('O'), choice!(Lit('P'), choice!(Lit('Q'), choice!(Lit('R'), choice!(Lit('S'), choice!(Lit('T'), choice!(Lit('U'), choice!(Lit('V'), choice!(Lit('W'), choice!(Lit('X'), choice!(Lit('Y'), choice!(Lit('a'), choice!(Lit('b'), choice!(Lit('c'), choice!(Lit('d'), choice!(Lit('e'), choice!(Lit('f'), choice!(Lit('g'), choice!(Lit('h'), choice!(Lit('i'), choice!(Lit('j'), choice!(Lit('k'), choice!(Lit('l'), choice!(Lit('m'), choice!(Lit('n'), choice!(Lit('o'), choice!(Lit('p'), choice!(Lit('q'), choice!(Lit('r'), choice!(Lit('s'), choice!(Lit('t'), choice!(Lit('u'), choice!(Lit('v'), choice!(Lit('w'), choice!(Lit('x'), Lit('y'))))))))))))))))))))))))))))))))))))))))))))))))))))), seq!(Lit(' '), seq!(seq!(choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), Lit('8'))))))))), seq!(choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), Lit('8'))))))))), seq!(choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), Lit('8'))))))))), seq!(choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), Lit('8'))))))))), seq!(choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), Lit('8'))))))))), star!(choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), Lit('8'))))))))))))))), choice!(seq!(Lit('-'), seq!(choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), Lit('8'))))))))), seq!(choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), Lit('8'))))))))), seq!(choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), Lit('8'))))))))), seq!(choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), Lit('8'))))))))), star!(choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), Lit('8'))))))))))))))), Eps)))))); 
    let result = parse_ext().parse(input);
    match result {
        Err(err) => print!("{:?}", err),
        Ok((ext, _rest)) => {
            let re = ext_to_re(&simp_ext(&ext));
            match re {
                Err(err) => print!("{:?}", err),
                Ok(re) => assert_eq!(expected, re) 
            }
        } 
    }
}



#[test]
fn test_parser_simp_to_re_us_addr_part1() {
    use RE::*;
    let input = "(.*) ([A-Za-z]{2})";
    let expected = seq!(star!(choice!(Lit('\0'), choice!(Lit('\u{1}'), choice!(Lit('\u{2}'), choice!(Lit('\u{3}'), choice!(Lit('\u{4}'), choice!(Lit('\u{5}'), choice!(Lit('\u{6}'), choice!(Lit('\u{7}'), choice!(Lit('\u{8}'), choice!(Lit('\t'), choice!(Lit('\n'), choice!(Lit('\u{b}'), choice!(Lit('\u{c}'), choice!(Lit('\r'), choice!(Lit('\u{e}'), choice!(Lit('\u{f}'), choice!(Lit('\u{10}'), choice!(Lit('\u{11}'), choice!(Lit('\u{12}'), choice!(Lit('\u{13}'), choice!(Lit('\u{14}'), choice!(Lit('\u{15}'), choice!(Lit('\u{16}'), choice!(Lit('\u{17}'), choice!(Lit('\u{18}'), choice!(Lit('\u{19}'), choice!(Lit('\u{1a}'), choice!(Lit('\u{1b}'), choice!(Lit('\u{1c}'), choice!(Lit('\u{1d}'), choice!(Lit('\u{1e}'), choice!(Lit('\u{1f}'), choice!(Lit(' '), choice!(Lit('!'), choice!(Lit('"'), choice!(Lit('#'), choice!(Lit('$'), choice!(Lit('%'), choice!(Lit('&'), choice!(Lit('\''), choice!(Lit('('), choice!(Lit(')'), choice!(Lit('*'), choice!(Lit('+'), choice!(Lit(','), choice!(Lit('-'), choice!(Lit('.'), choice!(Lit('/'), choice!(Lit('0'), choice!(Lit('1'), choice!(Lit('2'), choice!(Lit('3'), choice!(Lit('4'), choice!(Lit('5'), choice!(Lit('6'), choice!(Lit('7'), choice!(Lit('8'), choice!(Lit('9'), choice!(Lit(':'), choice!(Lit(';'), choice!(Lit('<'), choice!(Lit('='), choice!(Lit('>'), choice!(Lit('?'), choice!(Lit('@'), choice!(Lit('A'), choice!(Lit('B'), choice!(Lit('C'), choice!(Lit('D'), choice!(Lit('E'), choice!(Lit('F'), choice!(Lit('G'), choice!(Lit('H'), choice!(Lit('I'), choice!(Lit('J'), choice!(Lit('K'), choice!(Lit('L'), choice!(Lit('M'), choice!(Lit('N'), choice!(Lit('O'), choice!(Lit('P'), choice!(Lit('Q'), choice!(Lit('R'), choice!(Lit('S'), choice!(Lit('T'), choice!(Lit('U'), choice!(Lit('V'), choice!(Lit('W'), choice!(Lit('X'), choice!(Lit('Y'), choice!(Lit('Z'), choice!(Lit('['), choice!(Lit('\\'), choice!(Lit(']'), choice!(Lit('^'), choice!(Lit('_'), choice!(Lit('`'), choice!(Lit('a'), choice!(Lit('b'), choice!(Lit('c'), choice!(Lit('d'), choice!(Lit('e'), choice!(Lit('f'), choice!(Lit('g'), choice!(Lit('h'), choice!(Lit('i'), choice!(Lit('j'), choice!(Lit('k'), choice!(Lit('l'), choice!(Lit('m'), choice!(Lit('n'), choice!(Lit('o'), choice!(Lit('p'), choice!(Lit('q'), choice!(Lit('r'), choice!(Lit('s'), choice!(Lit('t'), choice!(Lit('u'), choice!(Lit('v'), choice!(Lit('w'), choice!(Lit('x'), choice!(Lit('y'), choice!(Lit('z'), choice!(Lit('{'), choice!(Lit('|'), choice!(Lit('}'), Lit('~')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), seq!(Lit(' '), seq!(choice!(Lit('A'), choice!(Lit('B'), choice!(Lit('C'), choice!(Lit('D'), choice!(Lit('E'), choice!(Lit('F'), choice!(Lit('G'), choice!(Lit('H'), choice!(Lit('I'), choice!(Lit('J'), choice!(Lit('K'), choice!(Lit('L'), choice!(Lit('M'), choice!(Lit('N'), choice!(Lit('O'), choice!(Lit('P'), choice!(Lit('Q'), choice!(Lit('R'), choice!(Lit('S'), choice!(Lit('T'), choice!(Lit('U'), choice!(Lit('V'), choice!(Lit('W'), choice!(Lit('X'), choice!(Lit('Y'), choice!(Lit('a'), choice!(Lit('b'), choice!(Lit('c'), choice!(Lit('d'), choice!(Lit('e'), choice!(Lit('f'), choice!(Lit('g'), choice!(Lit('h'), choice!(Lit('i'), choice!(Lit('j'), choice!(Lit('k'), choice!(Lit('l'), choice!(Lit('m'), choice!(Lit('n'), choice!(Lit('o'), choice!(Lit('p'), choice!(Lit('q'), choice!(Lit('r'), choice!(Lit('s'), choice!(Lit('t'), choice!(Lit('u'), choice!(Lit('v'), choice!(Lit('w'), choice!(Lit('x'), Lit('y')))))))))))))))))))))))))))))))))))))))))))))))))), seq!(choice!(Lit('A'), choice!(Lit('B'), choice!(Lit('C'), choice!(Lit('D'), choice!(Lit('E'), choice!(Lit('F'), choice!(Lit('G'), choice!(Lit('H'), choice!(Lit('I'), choice!(Lit('J'), choice!(Lit('K'), choice!(Lit('L'), choice!(Lit('M'), choice!(Lit('N'), choice!(Lit('O'), choice!(Lit('P'), choice!(Lit('Q'), choice!(Lit('R'), choice!(Lit('S'), choice!(Lit('T'), choice!(Lit('U'), choice!(Lit('V'), choice!(Lit('W'), choice!(Lit('X'), choice!(Lit('Y'), choice!(Lit('a'), choice!(Lit('b'), choice!(Lit('c'), choice!(Lit('d'), choice!(Lit('e'), choice!(Lit('f'), choice!(Lit('g'), choice!(Lit('h'), choice!(Lit('i'), choice!(Lit('j'), choice!(Lit('k'), choice!(Lit('l'), choice!(Lit('m'), choice!(Lit('n'), choice!(Lit('o'), choice!(Lit('p'), choice!(Lit('q'), choice!(Lit('r'), choice!(Lit('s'), choice!(Lit('t'), choice!(Lit('u'), choice!(Lit('v'), choice!(Lit('w'), choice!(Lit('x'), Lit('y')))))))))))))))))))))))))))))))))))))))))))))))))), star!(choice!(Lit('A'), choice!(Lit('B'), choice!(Lit('C'), choice!(Lit('D'), choice!(Lit('E'), choice!(Lit('F'), choice!(Lit('G'), choice!(Lit('H'), choice!(Lit('I'), choice!(Lit('J'), choice!(Lit('K'), choice!(Lit('L'), choice!(Lit('M'), choice!(Lit('N'), choice!(Lit('O'), choice!(Lit('P'), choice!(Lit('Q'), choice!(Lit('R'), choice!(Lit('S'), choice!(Lit('T'), choice!(Lit('U'), choice!(Lit('V'), choice!(Lit('W'), choice!(Lit('X'), choice!(Lit('Y'), choice!(Lit('a'), choice!(Lit('b'), choice!(Lit('c'), choice!(Lit('d'), choice!(Lit('e'), choice!(Lit('f'), choice!(Lit('g'), choice!(Lit('h'), choice!(Lit('i'), choice!(Lit('j'), choice!(Lit('k'), choice!(Lit('l'), choice!(Lit('m'), choice!(Lit('n'), choice!(Lit('o'), choice!(Lit('p'), choice!(Lit('q'), choice!(Lit('r'), choice!(Lit('s'), choice!(Lit('t'), choice!(Lit('u'), choice!(Lit('v'), choice!(Lit('w'), choice!(Lit('x'), Lit('y')))))))))))))))))))))))))))))))))))))))))))))))))))))));
    let result = parse_ext().parse(input);
    match result {
        Err(err) => print!("{:?}", err),
        Ok((ext, _rest)) => {
            let re = ext_to_re(&simp_ext(&ext));
            match re {
                Err(err) => print!("{:?}", err),
                Ok(re) => assert_eq!(expected, re) 
            }
        } 
    }
}
